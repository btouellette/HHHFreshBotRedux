version: '3.8'

services:
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  app:
    build: .
    env_file:
      - .env
    depends_on:
      # Our app does not work without our database
      # so this ensures our database is loaded first
      - postgres
    restart: always
    volumes:
      # Maps our current project directory `.` to
      # our working directory in the container
      - ./:/usr/src/app/
      # node_modules workaround for volumes
      # https://stackoverflow.com/a/32785014
      - /usr/src/app/node_modules
    command: "/usr/sbin/crond -f -l 8 -L /dev/stdout"
    #command: "node /usr/src/app/app.js"

  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in our Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the
  # address of this container.
  postgres:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    ports:
      # Standard port for PostgreSQL databases
      - "5432:5432"
    volumes:
      # When the PostgresSQL container is started it will run any scripts
      # provided in the `docker-entrypoint-initdb.d` directory, this connects
      # our seed file to that directory so that it gets run
      - ./dump.sql:/docker-entrypoint-initdb.d/database-seed.sql

  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  pgadmin-compose:
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - "16543:80"
    depends_on:
      - postgres
